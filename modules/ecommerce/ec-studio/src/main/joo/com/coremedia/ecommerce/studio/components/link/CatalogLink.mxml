<?xml version="1.0" encoding="UTF-8"?>
<!---
  a link field to a catalog object. It's read-only.
-->
<local:CatalogLinkBase
                xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:local="com.coremedia.ecommerce.studio.components.link.*"
                xmlns:exml="http://www.jangaroo.net/exml/0.8"
                xmlns="exml:ext.config"
                xmlns:editor="exml:com.coremedia.cms.editor.sdk.config"
                xmlns:ui="exml:com.coremedia.ui.config"
                xmlns:ec="exml:com.coremedia.ecommerce.studio.config"
                hideHeaders="true">
  <fx:Metadata>
    [ResourceBundle('com.coremedia.ecommerce.studio.ECommerceStudioPlugin')]
    [ResourceBundle('com.coremedia.cms.editor.sdk.columns.grid.GridColumns')]
  </fx:Metadata>
  <fx:Script><![CDATA[
    import com.coremedia.ui.data.Bean;
    import com.coremedia.ui.data.ValueExpression;
    import com.coremedia.ui.data.ValueExpressionFactory;

    public static const xtype:String = "com.coremedia.ecommerce.studio.config.catalogLink";

    /**
     * The context property name for the selected items.
     * The context value is an array of catalog objects
     */
    public static const SELECTED_ITEMS_VARIABLE_NAME:String = "selectedItems";

    /**
     * The context property name for the selected positions.
     * The context value is an array of numbers.
     */
    public static const SELECTED_POSITIONS_VARIABLE_NAME:String = "selectedPositions";

    /**
     * The context property name for the content.
     * The context value is a content object.
     */
    public static const CONTENT_VARIABLE_NAME:String = "content";

    /**
     * The context property name for the force read only property.
     * The context value is a boolean.
     */
    public static const FORCE_READ_ONLY_VARIABLE_NAME:String = "forceReadOnly";

    private var config:CatalogLink;
    private var myReadOnlyValueExpression:ValueExpression;

    // called by generated constructor code
    private function __initialize__(config:CatalogLink):void {
      myReadOnlyValueExpression = config.readOnlyValueExpression || ValueExpressionFactory.createFromValue(true);
    }

    public native function CatalogLink(config:CatalogLink = null);

    /**
     * A property path expression leading to the Bean whose property is edited.
     * This property editor assumes that this bean has a property 'properties'.
     * If it is not specified the component will use the specified model bean.
     */
    [Bindable]
    public var bindTo:ValueExpression;

    [Bindable]
    public var model:Bean;

    /**
     * An optional ValueExpression which forces the component to read-only if it is evaluated to true.
     */
    [Bindable]
    public var forceReadOnlyValueExpression:ValueExpression;

    /**
     * An optional ValueExpression which makes the component read-only if it is evaluated to true.
     */
    [Bindable]
    public var readOnlyValueExpression:ValueExpression;
    ]]></fx:Script>
  <fx:Declarations>
    <!---
       Set to false to hide the thumbnail of the entries. Default is true
     -->
    <fx:Boolean id="showThumbnails"/>

    <!---
       The name of the string property of the Bean to bind in this field.
       The string property holds the id of the catalog product
     -->
    <fx:String id="propertyName"/>

    <!---
       Set to true if the open in tab menu item and button should be hidden. Default is false
     -->
    <fx:Boolean id="hideOpenInTab"/>

    <!--- 
       Set to true if the remove menu item and button should be hidden. Default is false
     -->
    <fx:Boolean id="hideRemove"/>

    <fx:Array id="additionalToolbarItems"/>

    <!---
     The named drag drop group to which this grid belong to
    -->
    <fx:String id="ddGroup"/>

  </fx:Declarations>

    <local:plugins>
      <ui:BindListPlugin bindTo="{ValueExpressionFactory.createFromFunction(getCatalogListFunction(config))}">
        <ui:fields>
          <ui:DataField name="type"
                        mapping=""
                        convert_="{convertTypeLabel}"/>
          <ui:DataField name="typeCls"
                        mapping=""
                        convert_="{convertTypeCls}"/>
          <ui:DataField name="id"
                        mapping=""
                        convert_="{convertIdLabel}"/>
          <ui:DataField name="name"
                        mapping=""
                        convert_="{convertNameLabel}"/>
          <ui:DataField name="thumbnailUrl"
                        mapping=""
                        ifUnreadable=""/>
        </ui:fields>
      </ui:BindListPlugin>
      <editor:BindReadOnlyStyleClassPlugin bindTo="{config.bindTo}"
                                           forceReadOnlyValueExpression="{myReadOnlyValueExpression}"/>
      <ui:ContextMenuPlugin>
        <ui:contextMenu>
          <ec:CatalogLinkContextMenu propertyName="{config.propertyName}"
                                     bindTo="{config.bindTo}"
                                     forceReadOnlyValueExpression="{myReadOnlyValueExpression}"
                                     hideOpenInTab="{config.hideOpenInTab}"
                                     hideRemove="{config.hideRemove}"/>
        </ui:contextMenu>
      </ui:ContextMenuPlugin>
      <ui:BindSelectionPlugin selectedValues="{getSelectedValuesExpression()}"
                              selectedPositions="{getSelectedPositionsExpression()}"/>
    </local:plugins>
    <local:tbar>
      <ec:CatalogLinkToolbar additionalToolbarItems="{config.additionalToolbarItems}"
                             propertyName="{config.propertyName}"
                             readOnlyValueExpression="{myReadOnlyValueExpression}"
                             forceReadOnlyValueExpression="{config.forceReadOnlyValueExpression}"
                             bindTo="{config.bindTo}"
                             hideOpenInTab="{config.hideOpenInTab}"
                             hideRemove="{config.hideRemove}"/>
    </local:tbar>
  <local:selModel>
    <selection_RowModel mode="MULTI"/>
  </local:selModel>
    <local:columns>
      <editor:ThumbnailColumn width="100"
                              fixed="true"
                              hidden="{config.showThumbnails === false}"
                              renderer="{thumbColRenderer}" />
      <editor:TypeIconColumn sortable="false"/>
      <GridColumn header="{resourceManager.getString('com.coremedia.ecommerce.studio.ECommerceStudioPlugin', 'id_header')}"
                  stateId="id"
                  dataIndex="id"
                  sortable="false"/>
      <GridColumn header="{resourceManager.getString('com.coremedia.cms.editor.sdk.columns.grid.GridColumns', 'name_header')}"
                  stateId="name"
                  dataIndex="name"
                  sortable="false"
                  flex="1"/>
    </local:columns>
  <local:viewConfig>
    <GridView deferEmptyText="false"
              stripeRows="false"
              emptyText="{config.emptyText}">
      <plugins>
        <plugin_GridViewDragDrop ddGroup="{config.ddGroup}"
                                 pluginId="dragdrop"
                                 enableDrop="false"/>
      </plugins>
    </GridView>
  </local:viewConfig>

</local:CatalogLinkBase>
