<?xml version="1.0" encoding="UTF-8"?>
<!---
 This is a form panel which combines several form elements to an editor for call to action behaviour.
-->
<local:CallToActionConfigurationFormBase
        xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:local="com.coremedia.blueprint.studio.forms.containers.*"
        xmlns:exml="http://www.jangaroo.net/exml/0.8"
        xmlns="exml:ext.config"
        xmlns:ui="exml:com.coremedia.ui.config"
        xmlns:editor="exml:com.coremedia.cms.editor.sdk.config"
        itemId="callToActionConfigurationForm"
        title="{resourceManager.getString('com.coremedia.blueprint.studio.BlueprintDocumentTypes', 'CMTeasable_callToActionConfiguration_text')}"
        propertyNames="{[]}"
        collapsed="{config.collapsed || true}"
        settingsVE="{config.bindTo.extendBy('properties','localSettings')}">
  <fx:Metadata>
    [ResourceBundle('com.coremedia.blueprint.studio.BlueprintDocumentTypes')]
  </fx:Metadata>
  <fx:Script><![CDATA[
    import com.coremedia.cap.struct.Struct;
    import com.coremedia.cms.editor.sdk.util.IAnnotatedLinkListProvider;
    import com.coremedia.ui.data.ValueExpressionFactory;
    import com.coremedia.ui.mixins.HelpIconMixin;
    import com.coremedia.ui.skins.CheckboxSkin;

    import ext.Ext;

    public static const xtype:String = "com.coremedia.blueprint.studio.config.callToActionConfigurationForm";

    private var config:CallToActionConfigurationForm;

    public native function CallToActionConfigurationForm(config:CallToActionConfigurationForm = null);

    private function transformEnabledToEmptyTextForText(enabled:Boolean):String {
      return enabled
              ? resourceManager.getString('com.coremedia.blueprint.studio.BlueprintDocumentTypes', 'CMTeasable_CTAText_emptyText')
              : null;
    }

    private function transformEnabledToEmptyTextForHash(enabled:Boolean):String {
      return enabled
              ? resourceManager.getString('com.coremedia.blueprint.studio.BlueprintDocumentTypes', 'CMTeasable_CTAHash_emptyText')
              : null;
    }

    public static function isAnnotated(annotatedLinkListProvider:IAnnotatedLinkListProvider, rowIndex:Number):Boolean {
      var linkList:Array = annotatedLinkListProvider.getAnnotatedLinkListVE().getValue();
      var struct:Struct = null;
      if (!Ext.isEmpty(linkList)) {
        struct = linkList[rowIndex] as Struct;
      }
      return struct ? struct.get('callToActionEnabled') === true : false;
    }
    ]]></fx:Script>

  <local:plugins exml:mode="append">
    <ui:Binding source="ctaSettings.callToActionEnabled"
                destination="ctaViewModel.CTAEnabled"
                twoWay="true"/>
    <ui:Binding source="ctaSettings.callToActionCustomText"
                destination="ctaViewModel.CTAText"
                twoWay="true"/>
    <ui:Binding source="ctaSettings.callToActionHash"
                destination="ctaViewModel.CTAHash"
                twoWay="true"/>
    <editor:OnlyIf condition="{function ():Boolean { return config.useLegacyCTASettings; }}">
      <editor:then>
        <editor:PropertyFieldPlugin propertyName="callToActionConfiguration"/>
        <editor:ShowIssuesPlugin propertyName="callToActionConfiguration"
                                 bindTo="{config.bindTo}"/>
        <ui:RemoveItemsPlugin>
          <ui:items>
            <Component itemId="{HASH_ITEM_ID}" />
          </ui:items>
        </ui:RemoveItemsPlugin>
      </editor:then>
    </editor:OnlyIf>
  </local:plugins>
  <local:items>
    <ui:StatefulCheckbox ui="{!config.useLegacyCTASettings ? CheckboxSkin.BOLD.getSkin() : CheckboxSkin.DEFAULT.getSkin()}"
                         boxLabel="{resourceManager.getString('com.coremedia.blueprint.studio.BlueprintDocumentTypes', 'CMTeasable_callToActionConfiguration_enable_cta_text')}">
      <ui:plugins>
        <ui:BindPropertyPlugin bidirectional="true"
                               bindTo="{ValueExpressionFactory.create(CallToActionViewModel.CTA_ENABLED_PROPERTY_NAME, ctaViewModel)}"/>
        <editor:BindReadOnlyPlugin bindTo="{config.bindTo}"
                                  forceReadOnlyValueExpression="{config.forceReadOnlyValueExpression}"/>
        <editor:OnlyIf condition="{function ():Boolean { return config.useLegacyCTASettings; }}">
          <editor:then>
            <editor:ShowIssuesPlugin propertyName="callToActionConfiguration"
                                     bindTo="{config.bindTo}"/>
          </editor:then>
        </editor:OnlyIf>
      </ui:plugins>
    </ui:StatefulCheckbox>
    <ui:StatefulTextField fieldLabel="{resourceManager.getString('com.coremedia.blueprint.studio.BlueprintDocumentTypes', 'CMTeasable_CTAText_text')}"
                          flex="1"
                          hideLabel="{config.useLegacyCTASettings}"
                          itemId="{TEXT_ITEM_ID}"
                          style="{{marginLeft: '22px'}}"
                          checkChangeBuffer="500">
      <ui:plugins>
        <ui:BindPropertyPlugin bindTo="{ValueExpressionFactory.create(CallToActionViewModel.CTA_TEXT_PROPERTY_NAME, ctaViewModel)}"
                               bidirectional="true"/>
        <!-- Do not use BindDisablePlugin here, as it expects content as a value of bindTo.getValue() -->
        <ui:BindPropertyPlugin componentProperty="disabled"
                               bindTo="{ValueExpressionFactory.create(CallToActionViewModel.CTA_ENABLED_PROPERTY_NAME, ctaViewModel)}"
                               transformer="{function (value:Boolean):Boolean { return !value; }}" />
        <ui:BindPropertyPlugin componentProperty="emptyText"
                               bindTo="{ValueExpressionFactory.create(CallToActionViewModel.CTA_ENABLED_PROPERTY_NAME, ctaViewModel)}"
                               transformer="{transformEnabledToEmptyTextForText}"/>
        <ui:BlockEnterPlugin/>
        <editor:BindReadOnlyPlugin bindTo="{config.bindTo}"
                                   forceReadOnlyValueExpression="{config.forceReadOnlyValueExpression}"/>
        <editor:OnlyIf condition="{function ():Boolean { return config.useLegacyCTASettings; }}">
          <editor:then>
            <editor:ShowIssuesPlugin propertyName="callToActionConfiguration"
                                     bindTo="{config.bindTo}"/>
          </editor:then>
        </editor:OnlyIf>
      </ui:plugins>
    </ui:StatefulTextField>
    <ui:StatefulTextField fieldLabel="{resourceManager.getString('com.coremedia.blueprint.studio.BlueprintDocumentTypes', 'CMTeasable_CTAHash_text')}"
                          flex="1"
                          itemId="{HASH_ITEM_ID}"
                          style="{{marginLeft: '22px'}}"
                          checkChangeBuffer="500"
                          helpIconTarget="{HelpIconMixin.HELP_ICON_TARGET_LABEL}"
                          helpIconText="{resourceManager.getString('com.coremedia.blueprint.studio.BlueprintDocumentTypes', 'CMTeasable_CTAHash_helpText')}">
      <ui:plugins>
        <ui:BindPropertyPlugin
                bindTo="{ValueExpressionFactory.create(CallToActionViewModel.CTA_HASH_PROPERTY_NAME, ctaViewModel)}"
                bidirectional="true"/>
        <!-- Do not use BindDisablePlugin here, as it expects content as a value of bindTo.getValue() -->
        <ui:BindPropertyPlugin componentProperty="disabled"
                               bindTo="{ValueExpressionFactory.create(CallToActionViewModel.CTA_ENABLED_PROPERTY_NAME, ctaViewModel)}"
                               transformer="{function (value:Boolean):Boolean { return !value; }}" />
        <ui:BindPropertyPlugin componentProperty="emptyText"
                               bindTo="{ValueExpressionFactory.create(CallToActionViewModel.CTA_ENABLED_PROPERTY_NAME, ctaViewModel)}"
                               transformer="{transformEnabledToEmptyTextForHash}"/>
        <ui:BlockEnterPlugin/>
        <editor:BindReadOnlyPlugin bindTo="{config.bindTo}"
                                   forceReadOnlyValueExpression="{config.forceReadOnlyValueExpression}"/>
        <editor:OnlyIf condition="{function ():Boolean { return config.useLegacyCTASettings; }}">
          <editor:then>
            <editor:ShowIssuesPlugin propertyName="callToActionConfiguration"
                                     bindTo="{config.bindTo}"/>
          </editor:then>
        </editor:OnlyIf>
      </ui:plugins>
    </ui:StatefulTextField>
  </local:items>

</local:CallToActionConfigurationFormBase>
