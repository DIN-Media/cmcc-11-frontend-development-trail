schema {
  query: Query
}

directive @fetch(
  from : String!
) on FIELD_DEFINITION

directive @inherit(
  from: [String!]!
) on OBJECT | INTERFACE

directive @deprecated(
  reason: String = "No longer supported"
) on FIELD_DEFINITION | ENUM_VALUE | ARGUMENT_DEFINITION

#Built-in map of scalar type
scalar MapOfString

#Built-in rich text as tree type
scalar RichTextTree

scalar JSON

"""
The top query root
"""
type Query {
  """
  The content root.
  """
  content: ContentRoot
}

"""
The type `ContentRoot` combines access to all content, non commerce related queries.
"""
type ContentRoot {

  """
  The `content` query returns any known content object from the content repository by its content `id`.
  """
  content(
    """
    The content id as `integer` or formatted as *coremedia:///cap/content/<id>*.
    """
    id: String!,
    """
    The expected content type, e.g. `CMArticle`.
    """
    type: String): Content_ @fetch(from: "getContent(#id,#type)")

  """
  Dedicated `article` query, returning a content object of type `CMArticle`, matching the given id.
  """
  article(
    """
    The content id as `integer` or formatted as *coremedia:///cap/content/<id>*.
    """
    id: String!): CMArticle @fetch(from: "getContent(#id, 'CMArticle')")

  """
  Dedicated `picture` query, returning a content object of type `CMPicture`, matching the given id.
  """
  picture(
    """
    The content id as `integer` or formatted as *coremedia:///cap/content/<id>*.
    """
    id: String!): CMPicture @fetch(from: "getContent(#id, 'CMPicture')")

  """
  Dedicated `page` query, returning a content object of type `CMChannel`, matching the given id.
  """
  page(
    """
    The content id as `integer` or formatted as *coremedia:///cap/content/<id>*.
    """
    id: String!): CMChannel

  """
  The `pageByPath` query with return type `CMChannel` provides access to any page content by its navigation path.
  """
  pageByPath(
    """
    The navigation path to the requested page. A navigation path is a concatenation of segments, separated by '/'.
    """
    path: String!): CMChannel @fetch(from: "@byPathAdapter.to().getPageByPath(#path, #context['caasViewName'])")

  """
  Dedicated `site` query, returning a content object of type `Site`, matching the given site id.
  """
  site(
    """
    The site id of the requested site (of type `String`).
    """
    siteId: String,
    """
    The root segment of the requested site (of type `String`).
    """
    rootSegment: String,
    """
    Deprecated! Functionally identical to `id` but badly named for `id` is already used by content objects.
    A site id is not the same as a content id!
    """
    id: String  @deprecated(reason: "Arg 'id' is deprecated. Use 'siteId' instead.")): Site @fetch(from: "@byPathAdapter.to().getSite(#siteId, #rootSegment, #id)")

  """
  The `sites` query delivers an array of type `Site` of all known sites in the content repository w/o any parameter necessary.
  """
  sites: [Site]!
}

# interfaces alphabetically

interface Banner {
  teaserTitle: String
  teaserText(view: String): String
  media: [CMMedia]
  picture: CMPicture
  pictures: [CMPicture]
}

"""
Models the properties of an article content object.
"""
interface CMArticle @inherit(from: ["CMTeasable"]) {
}

interface CMAudio @inherit(from: ["CMMedia"]) {
  dataUrl: String
}

"""
Models the properties of a page content object.
"""
interface CMChannel @inherit(from: ["CMNavigation"]) {
  header: [CMLinkable]
  footer: [CMLinkable]
}

interface CMCollection @inherit(from: ["CMTeasable"]) {
  items: [CollectionItem]
  teasableItems: [CMTeasable]
  bannerItems: [Banner]
  detailItems: [Detail]
}

interface CMDownload @inherit(from: ["CMTeasable"]) {
  data: Blob
  fullyQualifiedUrl: String
  filename: String
}

interface CMDynamicList @inherit(from: ["CMCollection"]) {
}

interface CMExternalLink @inherit(from: ["CMTeasable"]) {
  url: String
  openInNewTab: Boolean
}

interface CMGallery @inherit(from: ["CMCollection"]) {
  mediaItems: [CMMedia]
}

interface CMHTML @inherit(from: ["CMMedia"]) {
  description: String
  html: String
}

interface CMImage @inherit(from: ["CMLocalized"]) {
  data: Blob
  description: String
}

interface CMImageMap @inherit(from: ["CMTeaser"]) {
  displayPicture: Boolean
  displayShortText: Boolean
  displayTitle: Boolean
  hotZones: [Hotzone]
  transformedHotZones: [TransformedHotZone]
}

interface CMInteractive @inherit(from: ["CMVisual"]) {}

interface CMLinkable @inherit(from: ["CMLocalized", "CollectionItem"]) {
  settings(paths: [[String!]!]!): JSON
  contentInSetting(paths: [[String!]!]!): [LinkedContentEntry]
  contentInStruct(paths: [[String!]!]!): [LinkedContentEntry]
  context: CMNavigation
  extDisplayedDate: String
  link: Link
  navigationPath: [CMLinkable]
  segment: String
  title: String
  validFrom: String
  validTo: String
  viewtype: String
  subjectTaxonomy: [CMTaxonomy]
  locationTaxonomy: [CMLocTaxonomy]
  htmlTitle: String
  htmlDescription: String
  keywords: String
}

interface CMLocalized @inherit(from: ["CMObject"]) {
  ignoreUpdates: Int
  languageId: String @deprecated(reason: "Property 'languageId' is deprecated. Use 'locale' instead.")
  locale: String
  localizedVariants: [CMLocalized!]!
  localizedVariant(language: String!, country: String, variant: String): CMLocalized
}

interface CMLocTaxonomy @inherit(from: ["CMTaxonomy"]) {
  postcode: String
  latitudeLongitude: String
  locChildren: [CMLocTaxonomy]
}

interface CMMedia @inherit(from: ["CMTeasable"]) {
  alt: String
  caption(view: String): String
  captionAsTree(view: String): RichTextTree
  captionReferencedContent(view: String): [Content_!]
  copyright: String
  data: Blob
  fullyQualifiedUrl: String
}

interface CMNavigation @inherit(from: ["CMTeasable", "HasPageGrid"]) {
  children: [CMLinkable]
  grid: PageGrid
  hidden: Boolean
  hiddenInSitemap: Boolean
  parent: CMNavigation
}

interface CMObject @inherit(from: ["Content_"]) {
}

interface CMPerson @inherit(from: ["CMTeasable"]) {
  firstName: String
  lastName: String
  displayName: String
  eMail: String
  organization: String
  jobTitle: String
}

"""
Models the properties of a picture content object.
"""
interface CMPicture @inherit(from: ["CMVisual"]) {
  base64Images(cropNames: [String!]): [Base64Image]!
  crops: [Crop!]!
  uriTemplate(imageFormat: ImageFormat): String
}

interface CMPlaceholder @inherit(from: ["CMTeasable"]) {
}

interface CMResourceBundle @inherit(from: ["CMLocalized"]) {
  localizations: MapOfString
}

interface CMSettings @inherit(from: ["CMLocalized"]) {
  settings(paths: [[String]]): JSON
  identifier: String
}

interface CMSite @inherit(from: ["CMLocalized"]) {
  id: ID!
  root: CMNavigation
  settings(paths: [[String!]!]!): JSON
}

interface CMSpinner @inherit(from: ["CMVisual"]) {
  sequence: [CMPicture]
}

interface CMTaxonomy @inherit(from: ["CMTeasable"]) {
  value: String
  externalReference: String
  children: [CMTaxonomy]
  parent: CMTaxonomy
  pathToRoot: [CMTaxonomy]
}

interface CMTeasable @inherit(from: ["CMLinkable", "Detail", "Banner"]) {
  authors: [CMTeasable]
  related: [CMTeasable]
  teaserOverlaySettings: TeaserOverlaySettings
  teaserTarget: CMLinkable
  teaserTargets: [ExtendedTeaserTarget]
  teaserTextAsTree(view: String): RichTextTree
  teaserTextReferencedContent(view: String): [Content_!]
  video: CMVideo
  videos: [CMVideo]
  spinner: CMSpinner
  root: CMNavigation
}

interface CMTeaser @inherit(from: ["CMTeasable"]) {
}

interface CMVideo @inherit(from: ["CMVisual"]) {
  timeLine: TimeLine
}

interface CMVisual @inherit(from: ["CMMedia"]) {
  dataUrl: String
  height: Int
  width: Int
}

interface CollectionItem {
  remoteLink(siteId:String, context:String): String!
}

interface Content_ {
  id: ID!
  creationDate: String!
  modificationDate: String!
  name: String!
  type: String!
  repositoryPath: String!
}

interface Detail {
  detailText(view: String): String
  detailTextAsTree(view: String): RichTextTree
  detailTextReferencedContent(view: String): [Content_!]
}

interface HasPageGrid {
  grid: PageGrid
}

# types alphabetically

type Base64Image {
  cropName: String!
  base64: String
}

type Blob {
  contentType: String!
  size: Int!
  eTag: String!
  uri: String @fetch(from: "@uriLinkComposer.apply(#root)")
}

type CMArticleImpl implements CMArticle @inherit(from: ["CMTeasableImpl"]) {
}

type CMAudioImpl implements CMAudio @inherit(from: ["CMMediaImpl"]) {
  dataUrl: String
}

type CMChannelImpl implements CMChannel @inherit(from: ["CMNavigationImpl"]) {
  header: [CMLinkable]
  footer: [CMLinkable]

  picture: CMPicture @fetch(from: "@channelMediaLinkListAdapter.to(#this, 'CMPicture').first()")
  pictures: [CMPicture] @fetch(from: "@channelMediaLinkListAdapter.to(#this, 'CMPicture').list()")

  video: CMVideo @fetch(from: "@channelMediaLinkListAdapter.to(#this, 'CMVideo').first()")
  videos: [CMVideo] @fetch(from: "@channelMediaLinkListAdapter.to(#this, 'CMVideo').list()")
}

type CMCollectionImpl implements CMCollection @inherit(from: ["CMTeasableImpl"]) {
  items: [CollectionItem]
  teasableItems: [CMTeasable] @fetch(from: "#this.items")
  bannerItems: [Banner] @fetch(from: "#this.items")
  detailItems: [Detail] @fetch(from: "#this.items")
}

type CMDownloadImpl implements CMDownload @inherit(from: ["CMTeasableImpl"]) {
  data: Blob @fetch(from: "@contentBlobAdapter.to(#root, 'data')")
  fullyQualifiedUrl: String @fetch(from: "#this.data == null ? null : @uriLinkComposer.apply(@filenameBlobAdapter.to(@contentBlobAdapter.to(#root, 'data')))")
  filename: String
}

type CMDynamicListImpl implements CMDynamicList @inherit(from: ["CMCollectionImpl"]) {
}

type CMExternalLinkImpl implements CMExternalLink @inherit(from: ["CMTeasableImpl"]) {
  url: String
  openInNewTab: Boolean @fetch(from:"openInNewTab?:false")
}

type CMGalleryImpl implements CMGallery @inherit(from: ["CMCollectionImpl"]) {
  mediaItems: [CMMedia] @fetch(from: "#this.items")
}

type CMHTMLImpl implements CMHTML @inherit(from: ["CMMediaImpl"]) {
  data: Blob @fetch(from: "@contentMarkupAdapter.to(#root,{'data'})")
  description: String
  html: String @fetch(from: "@htmlAdapterFactory.to().toHtml(#this, 'data')")
}

type CMImageImpl implements CMImage @inherit(from: ["CMLocalizedImpl"]) {
  data: Blob @fetch(from: "@contentBlobAdapter.to(#root, 'data')")
  description: String
}

type CMImageMapImpl implements CMImageMap @inherit(from: ["CMTeaserImpl"]) {
  displayPicture: Boolean @fetch(from: "localSettings?.overlay?.get('displayPicture')")
  displayShortText: Boolean @fetch(from: "localSettings?.overlay?.get('displayShortText')")
  displayTitle: Boolean @fetch(from: "localSettings?.overlay?.get('displayTitle')")
  hotZones: [Hotzone] @fetch(from: "localSettings?.get('image-map')")
  transformedHotZones: [TransformedHotZone] @fetch(from: "@hotZonesAdapter.to(#root).transformedHotZones")
}

type CMInteractiveImpl implements CMInteractive @inherit(from: ["CMVisualImpl"]) {}

type LinkedContentEntry {
  key: String
  value: [CMObject]
}

type CMLinkableImpl implements CMLinkable @inherit(from: ["CMLocalizedImpl"]) {
  settings(paths: [[String!]!]!): JSON @fetch(from: "@settingsAdapter.to(#root).getWrappedInMap(#paths)")
  contentInSetting(paths: [[String!]!]!): [LinkedContentEntry] @fetch(from: "@settingsAdapter.to(#root).getList(#paths)")
  contentInStruct(paths: [[String!]!]!): [LinkedContentEntry] @fetch(from: "@structAdapter.to(#root).getList(#paths)")
  context: CMNavigation @fetch(from: "@navigationAdapter.to(#root).findContext()")
  extDisplayedDate: String
  link: Link @fetch(from: "@graphQlLinkComposer.apply(#root)")
  navigationPath: [CMLinkable] @fetch(from: "@navigationAdapter.to(#root).pathToRoot")
  segment: String
  title: String
  validFrom: String
  validTo: String
  viewtype: String @fetch(from: "getLink('viewtype')?.layout")
  remoteLink(siteId:String, context:String): String!
  subjectTaxonomy: [CMTaxonomy]
  locationTaxonomy: [CMLocTaxonomy]
  htmlTitle: String
  htmlDescription: String
  keywords: String
}

type CMLocalizedImpl implements CMLocalized @inherit(from: ["CMObjectImpl"]) {
  ignoreUpdates: Int
  languageId: String @fetch(from: "#this.locale")
  locale: String
  localizedVariants: [CMLocalized!]! @fetch(from: "@localizedVariantsAdapterFactory.to().getLocalizations(#root)")
  localizedVariant(language: String!, country: String, variant: String): CMLocalized @fetch(from: "@localizedVariantsAdapterFactory.to().getLocalizationForLocale(#root, #language, #country, #variant)")
}

type CMLocTaxonomyImpl implements CMLocTaxonomy @inherit(from: ["CMTaxonomyImpl"]) {
  postcode: String
  latitudeLongitude: String
  locChildren: [CMLocTaxonomy] @fetch(from: "#this.children")
}

type CMMediaImpl implements CMMedia @inherit(from: ["CMTeasableImpl"]) {
  alt: String
  caption(view: String): String
  captionAsTree(view: String): RichTextTree @fetch(from: "caption?.view(#view?:'default')")
  captionReferencedContent(view: String): [Content_!] @fetch(from: "caption?.view(#view?:'default')?.getReferencedContent()")
  copyright: String
  data: Blob @fetch(from: "@contentBlobAdapter.to(#root, 'data')")
  fullyQualifiedUrl: String @fetch(from: "#this.data == null ? null : @uriLinkComposer.apply(@filenameBlobAdapter.to(@contentBlobAdapter.to(#root, 'data')))")
}

type CMNavigationImpl implements CMNavigation @inherit(from: ["CMTeasableImpl"]) {
  children: [CMLinkable] @fetch(from: "@navigationAdapter.to(#root).children")
  grid: PageGrid @fetch(from: "@pageGridAdapter.to(#root,'placement')")
  hidden: Boolean
  hiddenInSitemap: Boolean
  parent: CMNavigation @fetch(from: "@navigationAdapter.to(#root).parent")
  root: CMNavigation @fetch(from: "@navigationAdapter.to(#root).root")
}

type CMObjectImpl implements CMObject @inherit(from: ["Content_Impl"]) {
}

type CMPersonImpl implements CMPerson @inherit(from: ["CMTeasableImpl"]) {
  firstName: String
  lastName: String
  displayName: String
  eMail: String
  organization: String
  jobTitle: String
}

type CMPictureImpl implements CMPicture @inherit(from: ["CMVisualImpl"]) {
  base64Images(cropNames: [String!]): [Base64Image]!  @fetch(from: "@responsiveMediaAdapter.to(#root, 'data').base64Images(#cropNames)")
  crops: [Crop!]!  @fetch(from:"@responsiveMediaAdapter.to(#root, 'data').crops" )
  picture: CMPicture @fetch(from: "#root")
  pictures: [CMPicture] @fetch(from: "{#root}")
  uriTemplate(imageFormat: ImageFormat): String! @fetch(from: "@uriLinkComposer.apply(@responsiveMediaAdapter.to(#root, 'data', #imageFormat))")
}

type CMPlaceholderImpl implements CMPlaceholder @inherit(from: ["CMTeasableImpl"]) {
}

type CMResourceBundleImpl implements CMResourceBundle @inherit(from: ["CMLocalizedImpl"]) {
  localizations: MapOfString
}

type CMSettingsImpl implements CMSettings @inherit(from: ["CMLocalizedImpl"]) {
  settings(paths: [[String]]): JSON @fetch(from: "#paths == null ? #this.settings : @structAdapter.to(#root).getWrappedInMap('settings',#paths, null)")
  identifier: String @fetch(from: "#this.identifier?:#this.name")
}

type CMSiteImpl implements CMSite @inherit(from: ["CMLocalizedImpl"]) {
  id: ID!
  root: CMNavigation
  settings(paths: [[String!]!]!): JSON @fetch(from: "@settingsAdapter.to(#root).getWrappedInMap(#paths)")
}

type CMSpinnerImpl implements CMSpinner @inherit(from: ["CMVisualImpl"]) {
  sequence: [CMPicture]
}

type CMTaxonomyImpl implements CMTaxonomy @inherit(from: ["CMTeasableImpl"]) {
  value: String
  externalReference: String
  children: [CMTaxonomy]
  parent: CMTaxonomy @fetch(from: "@navigationAdapter.to(#this).getParent()")
  pathToRoot: [CMTaxonomy] @fetch(from: "@navigationAdapter.to(#this).getPathToRoot()")
}

type CMTeasableImpl implements CMTeasable @inherit(from: ["CMLinkableImpl"]) {
  authors: [CMTeasable]
  detailText(view: String): String @fetch(from: "detailText?.view(#view?:'default')")
  detailTextAsTree(view: String): RichTextTree @fetch(from: "detailText?.view(#view?:'default')")
  detailTextReferencedContent(view: String): [Content_!] @fetch(from: "detailText?.view(#view?:'default')?.getReferencedContent()")
  related: [CMTeasable]
  teaserOverlaySettings: TeaserOverlaySettings @fetch(from: "#root")
  teaserTarget: CMLinkable @fetch(from: "#root")
  teaserTargets: [ExtendedTeaserTarget] @fetch(from: "{{target: #root, callToActionHash: '',callToActionEnabled: !@settingsAdapter.to(#root).get({'callToActionDisabled'}, false), callToActionCustomText: @settingsAdapter.to(#root).get({'callToActionCustomText'}, '')}}")
  teaserText(view: String): String  @fetch(from: "(teaserText?.nullIfEmpty()?:(@settingsAdapter.to(#root).get({'teaserOverlay', 'enabled'}, false) == true) ? null : detailText)?.view(#view?:'simplified')")
  teaserTextAsTree(view: String): RichTextTree @fetch(from: "(teaserText?.nullIfEmpty()?:(@settingsAdapter.to(#root).get({'teaserOverlay', 'enabled'}, false) == true) ? null : detailText)?.view(#view?:'simplified')")
  teaserTextReferencedContent(view: String): [Content_!] @fetch(from: "(teaserText?.nullIfEmpty()?:(@settingsAdapter.to(#root).get({'teaserOverlay', 'enabled'}, false) == true) ? null : detailText)?.view(#view?:'simplified')?.getReferencedContent()")

  teaserTitle: String @fetch(from:"teaserTitle?:title")

  media: [CMMedia] @fetch(from: "@mediaLinkListAdapter.to(#root).list()")

  picture: CMPicture @fetch(from: "@mediaLinkListAdapter.to(#root, 'CMPicture').first()")
  pictures: [CMPicture] @fetch(from: "@mediaLinkListAdapter.to(#root, 'CMPicture').list()")

  video: CMVideo @fetch(from: "@mediaLinkListAdapter.to(#root, 'CMVideo').first()")
  videos: [CMVideo] @fetch(from: "@mediaLinkListAdapter.to(#root, 'CMVideo').list()")

  spinner: CMSpinner @fetch(from: "@mediaLinkListAdapter.to(#root, 'CMSpinner').first()")
  spinners: [CMSpinner] @fetch(from: "@mediaLinkListAdapter.to(#root, 'CMSpinner').list()")

  root: CMNavigation @fetch(from: "@navigationAdapter.to(#root).root")
}

type CMTeaserImpl implements CMTeaser @inherit(from: ["CMTeasableImpl"]) {
  teaserTarget: CMLinkable @fetch(from: "@teaserTargetsAdapter.to(#root).target")
  teaserTargets: [ExtendedTeaserTarget]  @fetch(from: "@teaserTargetsAdapter.to(#root).extendedTargets")

  media: [CMMedia] @fetch(from: "@teaserMediaLinkListAdapter.to(#root).list()")

  picture: CMPicture @fetch(from: "@teaserMediaLinkListAdapter.to(#root, 'CMPicture').first()")
  pictures: [CMPicture] @fetch(from: "@teaserMediaLinkListAdapter.to(#root, 'CMPicture').list()")

  video: CMVideo @fetch(from: "@teaserMediaLinkListAdapter.to(#root, 'CMVideo').first()")
  videos: [CMVideo] @fetch(from: "@teaserMediaLinkListAdapter.to(#root, 'CMVideo').list()")

  spinner: CMSpinner @fetch(from: "@teaserMediaLinkListAdapter.to(#root, 'CMSpinner').first()")
  spinners: [CMSpinner] @fetch(from: "@teaserMediaLinkListAdapter.to(#root, 'CMSpinner').list()")
}

type CMVideoImpl implements CMVideo @inherit(from: ["CMVisualImpl"]) {
  timeLine: TimeLine @fetch(from: "getLink('viewtype')?.layout == 'shoppable'? timeLine : null")
  video: CMVideo @fetch(from: "#root")
  videos: [CMVideo] @fetch(from: "{#root}")
}

type CMVisualImpl implements CMVisual @inherit(from: ["CMMediaImpl"]) {
  dataUrl: String
  height: Int
  width: Int
}

type Content_Impl implements Content_ {
  id: ID! @fetch(from: "@contentIdProvider.apply(#root)")
  creationDate: String!
  modificationDate: String!
  name: String!
  type: String!
  repositoryPath: String! @fetch(from: "#root.getParent().getPath()")
}

type Crop {
  aspectRatio: Dimension!
  name: String!
  minWidth: Int!
  minHeight: Int!
  sizes: [Dimension]!
}

type Dimension {
  height: Float!
  width: Float!
}

type ExtendedTeaserTarget {
  callToActionEnabled: Boolean @fetch(from: "getOrDefault('callToActionEnabled',false)")
  callToActionText: String @fetch(from: "getOrDefault('callToActionCustomText','')")
  callToActionHash: String @fetch(from: "getOrDefault('callToActionHash','')")
  target: CMLinkable
}

type Hotzone {
  alt: String
  coords: String!
  displayAsInlineOverlay: Boolean
  inlineOverlayTheme: String
  linkedContent: CMLinkable
  shape: String!
  target: String
}

type ImageMapCrop {
  name: String! @fetch(from:"key")
  coords: [Point]! @fetch(from:"value")
}

type Link {
  id: ID!
  type: String
}

type PageGrid {
  name: String
  cssClassName: String
  rows: [PageGridRow!]

  # retrieves the page grid placements as a flat list, optionally filtered by name
  placements(names: [String], excludeNames: [String]) :[PageGridPlacement]  @fetch(from: "getPlacements(#names, #excludeNames)")
  id: ID! @fetch(from: "@contentIdProvider.apply(#root.navigation)")
}

type PageGridPlacement {
  name: String!
  column: Int!
  colspan: Int!
  width: Int!
  viewtype: String
  items: [CMLinkable!]!
  id: ID @fetch(from: "@contentIdProvider.apply(#root.navigation)")
}

type PageGridRow {
  placements: [PageGridPlacement!]
  id: ID! @fetch(from: "@contentIdProvider.apply(#root.navigation)")
  rowId: Int!
}

type Point {
  x: Float
  y: Float
}

"""
Models the properties of a site object.
"""
type Site {
  id: ID!
  name: String!
  locale: String!
  crops: [Crop] @fetch(from: "@imageVariantsAdapter.to(#root).crops")
  root: CMNavigation @fetch(from: "siteRootDocument")
  repositoryPath: String! @fetch(from: "#root.getSiteRootFolder().getPath()")
  derivedSites: [Site!]! @fetch(from: "@localizedVariantsAdapterFactory.to().getDerivedSites(#root)")
}

type TeaserOverlaySettings {
  enabled: Boolean @fetch(from: "@settingsAdapter.to(#root).get({'teaserOverlay','enabled'}, false)")
  positionX: Int @fetch(from: "@settingsAdapter.to(#root).get({'teaserOverlay','positionX'}, 0)")
  positionY: Int @fetch(from: "@settingsAdapter.to(#root).get({'teaserOverlay','positionY'}, 0)")
  width: Int @fetch(from: "@settingsAdapter.to(#root).get({'teaserOverlay','width'}, 50)")
  style: JSON @fetch(from: "@settingsAdapter.to(#root).get({'teaserOverlay','style'}) == null ? null : @structAdapter.to(@settingsAdapter.to(#root).get({'teaserOverlay','style'})).getStructValue('settings', {'style'}, null)")
}

type TimeLine {
  defaultTarget: CMTeasable
  sequences: [TimeLineEntry]  @fetch(from: "sequences.?[link != null]")
}

type TimeLineEntry {
  startTimeMillis: Int
  link: CMTeasable
}

type TransformedHotZone {
  alt: String
  crops: [ImageMapCrop] @fetch(from: "coords.entrySet()")
  displayAsInlineOverlay: Boolean
  inlineOverlayTheme: String
  linkedContent: CMLinkable
  points: [Point]
  shape: String
  target: String
}

# enums alphabetically

enum ImageFormat {
  JPG
  JPEG
  PNG
  GIF
}
