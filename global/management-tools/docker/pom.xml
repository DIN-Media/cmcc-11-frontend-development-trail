<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>com.coremedia.blueprint</groupId>
    <artifactId>management-tools.blueprint-parent</artifactId>
    <version>1-SNAPSHOT</version>
    <relativePath>../blueprint-parent/pom.xml</relativePath>
  </parent>

  <groupId>com.coremedia.blueprint.docker</groupId>
  <artifactId>management-tools.blueprint-spring-boot-docker</artifactId>
  <packaging>pom</packaging>

  <properties>
    <!-- keep this version in sync with this poms parent version, you cannot not use ${project.parent.version} here -->
    <blueprint.groupId>com.coremedia.blueprint</blueprint.groupId>
    <blueprint.version>${project.version}</blueprint.version>

    <blueprint.boot.groupId>com.coremedia.blueprint.boot</blueprint.boot.groupId>
    <blueprint.boot.version>${project.version}</blueprint.boot.version>

    <!--this property can be either an organisational prefix or a complete registry prefix-->
    <docker.repository.prefix>coremedia</docker.repository.prefix>
    <!--this property must be unique for each image-->
    <docker.repository.suffix>${project.build.finalName}</docker.repository.suffix>
    <docker.image.tag>latest</docker.image.tag>
    <!--used as docker build args-->
    <docker.tools-base-image.repo>coremedia/java-application-base</docker.tools-base-image.repo>
    <!--
    | If you want to use a different base image type, i.e. a jdk version or Amazon Corretto, please take a look
    | at the available tags at https://hub.docker.com/r/coremedia/java-application-base.
    |
    | If you want to build your own base image, you could request access to the source repository
    | https://github.com/coremedia-contributions/docker.java-application-base.
    |
    | For the tools, we use the jdk type of the image here to enable the JShell integration.
    -->
    <docker.tools-base-image.tag>2.4.2-openjdk-11-jdk</docker.tools-base-image.tag>

    <application-plugin.version>3.0.1</application-plugin.version>
  </properties>

  <modules>
    <module>management-tools</module>
  </modules>

  <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>com.spotify</groupId>
          <artifactId>dockerfile-maven-plugin</artifactId>
          <version>1.4.13</version>
          <configuration>
            <!--if set to true you cannot build offline-->
            <pullNewerImage>false</pullNewerImage>
            <!--via repository the complete image name is defined-->
            <repository>${docker.repository.prefix}/${docker.repository.suffix}</repository>
            <useMavenSettingsForAuth>false</useMavenSettingsForAuth>
            <tag>${docker.image.tag}</tag>
            <buildArgs combine.children="append">
              <TOOLS_BASE_IMAGE_REPO>${docker.tools-base-image.repo}</TOOLS_BASE_IMAGE_REPO>
              <TOOLS_BASE_IMAGE_TAG>${docker.tools-base-image.tag}</TOOLS_BASE_IMAGE_TAG>
            </buildArgs>
          </configuration>
          <executions>
            <!--
             | you can skip the whole docker process using the system property dockerfile.skip
             -->
            <execution>
              <!--
               | you can skip building the image using the system property dockerfile.build.skip
               -->
              <id>docker-build</id>
              <goals>
                <goal>build</goal>
              </goals>
              <phase>install</phase>
            </execution>
            <execution>
              <id>docker-push</id>
              <!--
               | you can skip pushing the image using the system property dockerfile.push.skip
               -->
              <goals>
                <goal>push</goal>
              </goals>
              <phase>deploy</phase>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </pluginManagement>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-deploy-plugin</artifactId>
        <inherited>false</inherited>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>
